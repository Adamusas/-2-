1. Введение
    Проект представляет собой игру, разработанную на Python с использованием библиотеки Pygame. Основная цель игры — управлять мячом, который движется по дороге, создаваемой игроком. В игре также присутствуют элементы окружения, монстры и кнопки интерфейса.
    Используемые библиотеки:
        math
        os
        sys
        random.randint - импортирована отдельно функция
        pygame
        PIL.Image , PIL.ImageSequence - импортированы отдельно эти классы

2. Описание классов

    Класс BallHitbox
        Назначение: Отвечает за создание хитбокса мяча.
        Методы:
            __init__(size_hit_box, pos=(0, 0), color=(255, 0, 0)): Создает хитбокс мяча с заданным размером, позицией и цветом.
            draw(): Отрисовывает хитбокс на экране.
        Взаимодействие: используется классами Bal и SegmentRoad для проверки столкновений.

    Класс BackGround
        Назначение: Управляет анимацией фона игры.
        Методы:
            __init__(image_file): Загружает GIF-файл и разбивает его на кадры.
            draw(): Отображает текущий кадр фона.
            animate(time): Обновляет кадры анимации в зависимости от времени.
        Взаимодействие: фон отображается в начале игры и не взаимодействует с другими объектами.

    Класс Decor
        Назначение: создает элементы декора (например, текстуры дороги или мяча).
        Методы:
            __init__(pos, image_file): Инициализирует позицию и изображение декорации.
            draw(): Отображает декорацию на экране.
            animate(time): (Не реализован).
        Взаимодействие: используется в классах Bal, SegmentRoad, и Road для визуализации объектов.

    Класс SegmentRoad
        Назначение: Представляет сегмент дороги с хитбоксом и текстурой.
        Методы:
            __init__(hit_box, image_obj): Инициализирует хитбокс и текстуру сегмента дороги.
            draw(): Отображает сегмент на экране.
        Взаимодействие: используется в классе Road для построения дороги. Сегменты взаимодействуют с мячом (Bal) для обработки столкновений.

    Класс Bal
        Назначение: Управляет мячом — его движением, анимацией и столкновениями.
        Методы:
            __init__(x, y, hitbox, decor): Инициализирует позицию мяча, хитбокс и декор.
            draw(): Отображает мяч на экране.
            animate(time): Обрабатывает движение мяча, столкновения с дорогой и гравитацию.
        Взаимодействие:
            Взаимодействует с классом Road для проверки столкновений с сегментами дороги.
            Использует методы из классов BallHitbox и Decor.

    Класс Road
        Назначение: Управляет созданием дороги из сегментов.
        Методы:
            __init__(width_road=1, decor=None): Инициализирует список сегментов дороги и их ширину.
            draw(): Отображает все сегменты дороги.
            animate(time): Обрабатывает ввод мыши для добавления новых сегментов дороги.
        Взаимодействие:
            Использует класс SegmentRoad для добавления новых сегментов.
            Взаимодействует с мячом (Bal) для обработки движения по дороге.

    Класс Button
        Назначение: Создает кнопки интерфейса игры (например, для меню или паузы).
        Методы:
            __init__(x, y, w, h, text, size_font, color_main, function, animation): Инициализирует параметры кнопки (размеры, текст, цвет).
            draw(): Отображает кнопку на экране.
            animate(time): Обрабатывает анимацию кнопки при взаимодействии пользователя (нажатие).
        Взаимодействие: Вызывает указанные функции при нажатии.

    Класс Monster
        Назначение: управляет поведением монстра (движением и отрисовкой).
        Методы:
            __init__(hit_box, image_obj, speed): Инициализирует хитбокс монстра, его изображение и скорость движения.
            draw(): Отображает монстра на экране.
            animate(time): Обновляет положение монстра в зависимости от времени.
        Взаимодействие: монстры могут взаимодействовать с мячом (Bal) при столкновении.

    Класс Monsters
        Назначение: Управляет списком монстров в игре (создание новых объектов).
        Методы:
            __init__(decor, width_monster): Инициализирует список монстров и их декор.
        Взаимодействие: Использует класс Monster для добавления новых объектов.

3. Функции вне классов

    load_image(name)
        Загружает изображение из папки проекта. Если файл не найден — программа завершает работу.

    split_gif(gif_file)
        Разделяет GIF-файл на отдельные кадры.

    save_frames(frames, name)
        Сохраняет кадры изображения в указанной папке.

    calculate_new_velocity_and_angle(v0, theta0, f, theta_f, t)
        Вычисляет новую скорость и угол движения объекта под воздействием силы.

    are_points_collinear(x1, y1, x2, y2, x3, y3)
        Проверяет коллинеарность трех точек.

    find_circle_center(x1, y1, x2, y2, x3, y3)
        Находит центр окружности по трем точкам.

    find_ray_circle_intersection(ray_origin, target_point, radius)
        Находит точку пересечения луча с окружностью.

4. Взаимосвязь классов

    Класс Bal активно взаимодействует с классами:
        Road — чтобы обрабатывать движение по дороге;
        BallHitbox — чтобы проверять столкновения;
        Другими вспомогательными классами (Decor и физические функции).

    Классы декораций (Decor и BackGround) используются для визуализации объектов.

    Классы управления (Button и Monsters) добавляют интерактивные элементы игры.

    Класс дороги (Road) состоит из множества объектов типа SegmentRoad.

    Функции физики обеспечивают расчеты движения мяча (calculate_new_velocity_and_angle) или проверку геометрических условий (are_points_collinear и другие).
