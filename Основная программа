import pygame
import os
import sys
import math
from PIL import Image, ImageSequence


def load_image(name, colorkey=None):
    fullname = os.path.join('data', name)
    # если файл не существует, то выходим
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)
    return image


def split_gif(gif_file):
    # Создаем полный путь к файлу
    gif_path = os.path.join('data', gif_file)  # 'data' - папка, gif_file - имя файла
    img = Image.open(gif_path)  # Открываем GIF-файл
    frames = []  # Инициализируем пустой список для хранения кадров
    for frame in ImageSequence.Iterator(img):  # Проходим по всем кадрам с помощью итератора
        frames.append(frame.copy())  # Копируем текущий кадр и добавляем его в список
    return frames  # Возвращаем список всех кадров


def save_frames(frames, name):
    # Сохраняем каждый кадр в указанной папке
    count_frames = 0
    for i, frame in enumerate(frames):
        count_frames = i
        frame.save(os.path.join('data', f'{name}_{i}.png'))
    return count_frames


class BallHitbox(pygame.sprite.Sprite):
    def __init__(self, size, pos=(0, 0), color=(255, 0, 0)):
        super().__init__()
        self.image = pygame.Surface([size, size], pygame.SRCALPHA)
        pygame.draw.ellipse(self.image, color, [0, 0, size, size], 1)
        self.rect = self.image.get_rect()
        self.rect.center = pos
        self.radius = size // 2  # Устанавливаем радиус для проверки коллизии
        self.x, self.y = pos

    def draw(self):
        screen.blit(self.image, (self.x, self.y))


class BackGround(pygame.sprite.Sprite):
    def __init__(self, image_file):
        super().__init__()
        self.name = image_file
        self.count_frames = save_frames(split_gif(self.name), self.name[0: -4])
        self.current_frame = 0
        self.fps = 20
        self.image = [pygame.transform.scale(load_image(f'{self.name[0: -4]}_{i}.png'), size) for i in
                      range(self.count_frames)]

    def draw(self):
        screen.blit(self.image[int(self.current_frame)], (0, 0))

    def animate(self, time):
        self.current_frame += time / (1000 / self.fps)
        self.current_frame %= self.count_frames


class Decor(pygame.sprite.Sprite):
    def __init__(self, pos, image_file):
        super().__init__()
        self.x, self.y = pos
        self.name = image_file

    def draw(self):
        screen.blit(self.name, (self.x, self.y))


class SegmentRoad:
    def __init__(self, hit_box, image_obj):
        self.image = image_obj
        self.hit_box = hit_box

    def draw(self):
        self.image.draw()


class Bal:
    def __init__(self, x, y, hitbox, decor, road, velocity=None):
        if velocity is None:
            velocity = [10, 0]
        self.x, self.y = pos = x, y
        self.velocity = velocity
        self.hit_box = hitbox
        self.decor = decor
        self.road = road

        self.sum_vector = [0, 0]
        self.g_vector = [270, 9.81]
        self.reaction_vector = [0, 0]
        self.round_vector = [0, 0]

    def draw(self):
        self.decor.draw()
        self.hit_box.draw()

    def animate(self, time):
        self.decor.x += self.velocity[0]
        self.decor.y += self.velocity[1]
        self.hit_box.x += self.velocity[0]
        self.hit_box.y += self.velocity[1]


class Road:
    def __init__(self, width_road=1, decor=None):
        self.list_segments = []
        self.decor = decor
        self.width = width_road
        self.speed = 0
        self.vector_angle = 180
        self.end_line = False
        self.is_pressed = False

    def draw(self):
        for segment in self.list_segments:
            segment.draw()  # Отрисовываем каждый сегмент

    def animate(self, time):
        # Обработка нажатия мыши
        if pygame.mouse.get_pressed()[0]:

            pos = (pygame.mouse.get_pos()[0] - self.width / 2, pygame.mouse.get_pos()[1] - self.width / 2)
            if not self.list_segments: self.list_segments.append(
                SegmentRoad(BallHitbox(self.width, pos), Decor(pos, self.decor)))
            if not self.list_segments or math.dist((self.list_segments[-1].hit_box.x, self.list_segments[-1].hit_box.y),
                                                   pos) >= self.width / 2:
                last_segment_pos = (self.list_segments[-1].hit_box.x, self.list_segments[-1].hit_box.y)
                self.list_segments.append(
                    SegmentRoad(BallHitbox(self.width, pos), Decor(pos, self.decor)))
                if not self.end_line:
                    distance = math.dist(last_segment_pos, pos)
                    segment_count = int(distance // (self.width / 2))  # Определяем количество сегментов для добавления
                    for i in range(1, segment_count + 1):
                        new_pos = (
                            last_segment_pos[0] + (pos[0] - last_segment_pos[0]) * (i / (segment_count + 1)),
                            last_segment_pos[1] + (pos[1] - last_segment_pos[1]) * (i / (segment_count + 1))
                        )
                        self.list_segments.append(
                            SegmentRoad(BallHitbox(self.width, new_pos), Decor(new_pos, self.decor))
                        )
                self.is_pressed = True
                self.end_line = False
        elif self.is_pressed:
            self.end_line = True
            self.is_pressed = True

        angle = math.radians(self.vector_angle)
        delta_x = time / 1000 * (self.speed * math.cos(angle))
        delta_y = time / 1000 * (self.speed * math.sin(angle))

        # Обновляем позиции хитбоксов и текстур
        for segment in reversed(self.list_segments):
            segment.hit_box.x += delta_x
            segment.hit_box.y += delta_y
            segment.image.x += delta_x
            segment.image.y += delta_y

            if segment.hit_box.x < -self.width:
                self.list_segments.remove(segment)  # Удаляем сегмент из списка


class Button:
    def __init__(self, x: int, y: int, w: int, h: int, text: str, size_font: int, color_main: (int, int, int),
                 function, animation: bool):
        self.rect = pygame.Rect(x, y, w, h)
        self.text = text
        self.color_main = color_main
        self.action = function
        self.flag_click = False
        self.size_font = size_font
        self.font = pygame.font.SysFont('Arial', self.size_font)  # Шрифт для текста
        self.current_color = list(color_main)
        self.current_size = size_font
        self.time_animation = 500
        self.time_first_part = self.time_animation / 10
        self.time_second_part = self.time_animation - self.time_first_part
        self.real_time = 0
        self.animation = animation

    def draw(self):
        pygame.draw.rect(screen, self.color_main, self.rect, 10)
        text_surface = self.font.render(self.text, True, self.color_main)
        text_rect = text_surface.get_rect(center=self.rect.center)  # Центрируем текст
        screen.blit(text_surface, text_rect)

    def animate(self, time):
        if not self.flag_click:
            if event.type == pygame.MOUSEBUTTONDOWN:
                if self.rect.collidepoint(event.pos):  # Проверяем нажатие на кнопку
                    self.flag_click = True
                    self.action()
                    if self.animation:
                        if self.real_time == 0:
                            self.real_time += time
                        else:
                            self.real_time = time
        if self.flag_click:
            if event.type == pygame.MOUSEBUTTONUP:
                self.flag_click = False
        if self.real_time > 0:
            if self.real_time < self.time_first_part:
                self.current_size = self.size_font - (self.size_font * 0.5 * (self.real_time / self.time_first_part))
            elif (self.real_time - self.time_first_part) < self.time_second_part:
                self.current_size = self.size_font * 0.5 * (
                        ((self.real_time - self.time_first_part) / self.time_second_part) + 1)
            self.real_time += time
            if self.real_time > self.time_animation:
                self.real_time = 0
                self.current_size = self.size_font
            self.font = pygame.font.SysFont('Arial', int(self.current_size))


class Window:
    def __init__(self, list_objects: list, background: BackGround):
        self.list_objects = list_objects
        self.background = background
        self.clock = pygame.time.Clock()

    def update(self):
        time = self.clock.get_time()
        self.background.draw()
        self.background.animate(time)
        for i in range(len(self.list_objects)):
            self.list_objects[i].draw()
            self.list_objects[i].animate(time)
        self.clock.tick(fps)

    def add_obj(self, obj):
        self.list_objects.append(obj)

    def remove_obj(self, obj):
        self.list_objects.remove(obj)


if __name__ == "__main__":
    pygame.init()
    pygame.display.set_caption('Draw for Drive')
    size = width, height = pygame.display.Info().current_w, pygame.display.Info().current_h
    screen = pygame.display.set_mode(size, pygame.NOFRAME)
    running = True
    fps = 60


    def j():
        print('j')


    r = Road(10, pygame.transform.scale(load_image('yellowbal.png'), (10, 10)))

    main_window = Window(
        [Button(100, 100, 200, 100, 'START', 50, (255, 0, 0), j, animation=True),
         r, Bal(300, 200, BallHitbox(100, (300, 200)),
                Decor((300, 200), pygame.transform.scale(load_image('perpelbal.png'), (100, 100))), r)],
        BackGround('mainmenu.gif'))
    active_window = 'main'
    dict_windows = {'main': main_window,
                    # 'select_your_car':
                    }
    while running:
        # внутри игрового цикла ещё один цикл
        # приёма и обработки сообщений
        for event in pygame.event.get():
            # при закрытии окна
            if event.type == pygame.QUIT:
                running = False
                # РЕАКЦИЯ НА ОСТАЛЬНЫЕ СОБЫТИЯ
            ...
        # отрисовка и изменение свойств объектов
        dict_windows[active_window].update()
        pygame.display.flip()

"""нет, используй другой подход. имея общий вектор мы можем рассчитать насколько изменится x и y у точки на конце вектора относительно нынешнего положения,.так как m мы берем равный 1, то сила равна ускорению, воспользуйся формулой для нахождения равнодействующей силы между двумя последовательно ее применяя к каждой из действующих сил. если ты все сделаешь правильно, то у тебя будет угол вектора общей силы а также ускорение по этому вектору, теперь нужно просто изменить x и y шара благодоря тригонометрии, узнаем насколько изменилось расстояние между прежними и новыми координатами зная сколько прошло времени между кадрами и ускорение, затем имея это расстояние а также угол вектора можно рассчитать насколько в отдельности изменился x и y, обновляем положение шара и пересчитываем общий вектор"""
