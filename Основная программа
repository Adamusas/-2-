import math
import os
import sys

import pygame
from PIL import Image, ImageSequence


def load_image(name):
    fullname = os.path.join('data', name)
    # если файл не существует, то выходим
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)
    return image


def split_gif(gif_file):
    # Создаем полный путь к файлу
    gif_path = os.path.join('data', gif_file)  # 'data' - папка, gif_file - имя файла
    img = Image.open(gif_path)  # Открываем GIF-файл
    frames = []  # Инициализируем пустой список для хранения кадров
    for frame in ImageSequence.Iterator(img):  # Проходим по всем кадрам с помощью итератора
        frames.append(frame.copy())  # Копируем текущий кадр и добавляем его в список
    return frames  # Возвращаем список всех кадров


def save_frames(frames, name):
    # Сохраняем каждый кадр в указанной папке
    count_frames = 0
    for i, frame in enumerate(frames):
        count_frames = i
        frame.save(os.path.join('data', f'{name}_{i}.png'))
    return count_frames


def calculate_new_velocity_and_angle(V0, theta0, F, thetaF, t):
    # Calculate initial velocity components in Cartesian coordinates
    V0x = V0 * math.cos(theta0)
    V0y = V0 * math.sin(theta0)

    # Calculate force components in Cartesian coordinates (assuming mass = 1)
    Fx = F * math.cos(thetaF)
    Fy = F * math.sin(thetaF)

    # Update velocity components based on acceleration (force) over time
    # Note: t is in milliseconds; convert to seconds for calculations
    Vx = V0x + Fx * (t / 1000)
    Vy = V0y + Fy * (t / 1000)

    # Calculate new velocity magnitude and angle
    new_velocity = math.sqrt(Vx ** 2 + Vy ** 2)
    new_angle = math.atan2(Vy, Vx)  # Angle in radians

    return [new_angle, new_velocity]


def are_points_collinear(x1, y1, x2, y2, x3, y3):
    # Вычисление площади треугольника
    area = 0.5 * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))

    # Проверка на коллинеарность
    return area == 0


def find_circle_center(x1, y1, x2, y2, x3, y3):
    # Вычисление средних значений
    D = 2 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))

    if D == 0:
        raise ValueError("The points are collinear; no unique circle can be defined.")

    # Вычисление координат центра окружности
    xc = ((x1 ** 2 + y1 ** 2) * (y2 - y3) +
          (x2 ** 2 + y2 ** 2) * (y3 - y1) +
          (x3 ** 2 + y3 ** 2) * (y1 - y2)) / D

    yc = ((x1 ** 2 + y1 ** 2) * (x3 - x2) +
          (x2 ** 2 + y2 ** 2) * (x1 - x3) +
          (x3 ** 2 + y3 ** 2) * (x2 - x1)) / D

    return xc, yc


def find_ray_circle_intersection(ray_origin, target_point, radius):
    # Распаковка координат
    x0, y0 = ray_origin  # Центр окружности (начало луча)
    x1, y1 = target_point  # Произвольная точка

    # Вектор от центра окружности к произвольной точке
    dx = x1 - x0
    dy = y1 - y0

    # Нормализация вектора
    length = math.sqrt(dx ** 2 + dy ** 2)
    dx /= length
    dy /= length

    # Уравнение окружности: (x - x0)^2 + (y - y0)^2 = r^2
    # Подставляем уравнение линии: y = y0 + dy * t, x = x0 + dx * t
    # Получаем квадратное уравнение по t:

    a = dx ** 2 + dy ** 2
    b = 2 * (dx * (x0 - x0) + dy * (y0 - y0))  # Здесь cx и cy равны x0 и y0 соответственно
    c = (x0 - x0) ** 2 + (y0 - y0) ** 2 - radius ** 2  # cx и cy равны x0 и y0 соответственно

    discriminant = b ** 2 - 4 * a * c

    # Находим два значения t (временные параметры)
    t1 = (-b + math.sqrt(discriminant)) / (2 * a)
    t2 = (-b - math.sqrt(discriminant)) / (2 * a)

    # Выбираем ближайшую точку пересечения (t > 0)
    t = min(t for t in [t1, t2] if t > 0)

    # Находим координаты точки пересечения
    intersection_x = x0 + dx * t
    intersection_y = y0 + dy * t

    # Вычисляем угол наклона луча
    angle = math.atan2(dy, dx)

    return (intersection_x, intersection_y), angle


class BallHitbox(pygame.sprite.Sprite):
    def __init__(self, size, pos=(0, 0), color=(255, 0, 0)):
        super().__init__()
        self.image = pygame.Surface([size, size], pygame.SRCALPHA)
        pygame.draw.ellipse(self.image, color, [0, 0, size, size], 1)
        self.radius = size / 2  # Устанавливаем радиус для проверки коллизии
        self.x, self.y = pos

    def draw(self):
        # screen.blit(self.image, (self.x, self.y))
        ...


class BackGround(pygame.sprite.Sprite):
    def __init__(self, image_file):
        super().__init__()
        self.name = image_file
        self.count_frames = save_frames(split_gif(self.name), self.name[0: -4])
        self.current_frame = 0
        self.fps = 20
        self.image = [pygame.transform.scale(load_image(f'{self.name[0: -4]}_{i}.png'), size) for i in
                      range(self.count_frames)]

    def draw(self):
        screen.blit(self.image[int(self.current_frame)], (0, 0))

    def animate(self, time):
        self.current_frame += time / (1000 / self.fps)
        self.current_frame %= self.count_frames


class Decor(pygame.sprite.Sprite):
    def __init__(self, pos, image_file):
        super().__init__()
        self.x, self.y = pos
        self.name = image_file

    def draw(self):
        screen.blit(self.name, (self.x, self.y))

    def animate(self, time):
        ...


class SegmentRoad:
    def __init__(self, hit_box, image_obj):
        self.image = image_obj
        self.hit_box = hit_box

    def draw(self):
        self.image.draw()
        self.hit_box.draw()


class Bal:
    def __init__(self, x, y, hitbox, decor, velocity=None):
        if velocity is None:
            velocity = [0, 0]
        self.x, self.y = x, y
        self.hit_box = hitbox
        self.decor = decor
        self.V = [0.0, 0.0]
        self.g = [math.radians(270), 500]
        self.omega = 0.0
        self.score_ = 0

    def draw(self):
        self.decor.draw()
        self.hit_box.draw()

    def animate(self, time):
        if road.list_segments:
            collide_segment = sorted(road.list_segments, key=lambda x: math.dist(
                (x.hit_box.x + x.hit_box.radius, x.hit_box.y + x.hit_box.radius),
                (self.x + self.hit_box.radius, self.y + self.hit_box.radius)))[0]

            if math.dist((collide_segment.hit_box.x + collide_segment.hit_box.radius,
                          collide_segment.hit_box.y + collide_segment.hit_box.radius), (self.x + self.hit_box.radius,
                                                                                        self.y + self.hit_box.radius)) <= self.hit_box.radius + collide_segment.hit_box.radius:
                collide_point, a = find_ray_circle_intersection((
                    collide_segment.hit_box.x + collide_segment.hit_box.radius,
                    collide_segment.hit_box.y + collide_segment.hit_box.radius),
                    (self.x + self.hit_box.radius,
                     self.y + self.hit_box.radius),
                    collide_segment.hit_box.radius)
                dx = self.hit_box.radius * math.cos(a)
                dy = self.hit_box.radius * math.sin(a)
                new_point = (collide_point[0] + dx - self.hit_box.radius, collide_point[1] + dy - self.hit_box.radius)
                self.y = new_point[1]

                for i in road.list_segments:
                    i.hit_box.x -= new_point[0] - self.x
                    i.image.x -= new_point[0] - self.x
                R = self.V[1] ** 2 + 1
                i = road.list_segments.index(collide_segment)
                if i + 1 < len(road.list_segments) > 2:
                    x1, y1 = road.list_segments[i - 1].hit_box.x, road.list_segments[i - 1].hit_box.y
                    x2, y2 = road.list_segments[i].hit_box.x, road.list_segments[i].hit_box.y
                    x3, y3 = road.list_segments[i + 1].hit_box.x, road.list_segments[i + 1].hit_box.y
                    if not are_points_collinear(x1, y1, x2, y2, x3, y3):
                        R = find_circle_center(x1, y1, x2, y2, x3, y3)
                        R = math.dist((collide_segment.hit_box.x + collide_segment.hit_box.radius,
                                       collide_segment.hit_box.y + collide_segment.hit_box.radius), R) - road.width
                # есть касание
                a = abs(a - math.radians(90))
                if collide_segment.hit_box.x + collide_segment.hit_box.radius < self.x + self.hit_box.radius:
                    aR = a + math.radians(90)
                else:
                    aR = a - math.radians(270)

                Na = a  # угол нормальной силы
                N = self.g[1] * math.cos(aR) + ((self.V[1] ** 2) / R)
                self.V = calculate_new_velocity_and_angle(self.V[1], self.V[0], N, Na, time)
                self.V[1] = self.V[1] * math.cos(aR)

                usk = (5 * self.g[1] * math.cos(aR)) / (2 * self.hit_box.radius) * -1
                self.omega += usk * time / 1000
                vl = self.omega * self.hit_box.radius
                self.V[1] += vl
                self.V = calculate_new_velocity_and_angle(self.V[1], self.V[0], 80000, 0, time)


            else:
                self.omega *= 1 - (0.5 * time / 1000)
                self.V = calculate_new_velocity_and_angle(self.V[1], self.V[0], self.g[1], self.g[0], time)

        self.V[1] = abs(self.V[1])
        vx = self.V[1] * math.cos(self.V[0])
        vy = self.V[1] * math.sin(self.V[0])
        dx = vx * time / 1000
        dy = vy * time / 1000
        self.y -= dy
        self.hit_box.y, self.decor.y = self.y, self.y
        if road.list_segments:
            for i in road.list_segments:
                i.hit_box.x -= dx
                i.image.x -= dx

        self.score_ += dx
        score.text = str(int(self.score_))
        if self.y > height + self.hit_box.radius: end_f()


class Road:
    def __init__(self, width_road=1, decor=None):
        self.list_segments = []
        self.decor = decor
        self.width = width_road
        self.end_line = True
        self.is_pressed = False

    def draw(self):
        for segment in self.list_segments:
            segment.draw()  # Отрисовываем каждый сегмент

    def animate(self, time):
        pos = (pygame.mouse.get_pos()[0] - self.width / 2, pygame.mouse.get_pos()[1] - self.width / 2)
        if math.dist((pos[0] + self.width / 2, pos[1] + self.width / 2),
                     (bal.x + bal.hit_box.radius, bal.y + bal.hit_box.radius)) > bal.hit_box.radius + self.width / 2:
            # Обработка нажатия мыши
            if pygame.mouse.get_pressed()[0]:
                if not self.list_segments: self.list_segments.append(
                    SegmentRoad(BallHitbox(self.width, pos), Decor(pos, self.decor)))
                if not self.list_segments or math.dist(
                        (self.list_segments[-1].hit_box.x, self.list_segments[-1].hit_box.y),
                        pos) >= self.width / 2:
                    last_segment_pos = (self.list_segments[-1].hit_box.x, self.list_segments[-1].hit_box.y)
                    self.list_segments.append(
                        SegmentRoad(BallHitbox(self.width, pos), Decor(pos, self.decor)))
                    if not self.end_line:
                        distance = math.dist(last_segment_pos, pos)
                        segment_count = int(
                            distance // (self.width / 2))  # Определяем количество сегментов для добавления
                        for i in range(1, segment_count + 1):
                            new_pos = (
                                last_segment_pos[0] + (pos[0] - last_segment_pos[0]) * (i / (segment_count + 1)),
                                last_segment_pos[1] + (pos[1] - last_segment_pos[1]) * (i / (segment_count + 1))
                            )
                            self.list_segments.append(
                                SegmentRoad(BallHitbox(self.width, new_pos), Decor(new_pos, self.decor))
                            )
                    self.is_pressed = True
                    self.end_line = False
            elif self.is_pressed:
                self.end_line = True
                self.is_pressed = True
        else:
            self.end_line = True

        # Обновляем позиции хитбоксов и текстур
        for segment in reversed(self.list_segments):
            if segment.hit_box.x < -self.width:
                self.list_segments.remove(segment)  # Удаляем сегмент из списка


class Button:
    def __init__(self, x: int, y: int, w: int, h: int, text: str, size_font: int, color_main: (int, int, int),
                 function, animation: bool):
        self.rect = pygame.Rect(x, y, w, h)
        self.text = text
        self.color_main = color_main
        self.action = function
        self.flag_click = False
        self.size_font = size_font
        self.font = pygame.font.SysFont('Arial', self.size_font)  # Шрифт для текста
        self.current_color = list(color_main)
        self.current_size = size_font
        self.time_animation = 500
        self.time_first_part = self.time_animation / 10
        self.time_second_part = self.time_animation - self.time_first_part
        self.real_time = 0
        self.animation = animation

    def draw(self):
        pygame.draw.rect(screen, self.color_main, self.rect, 10)
        text_surface = self.font.render(self.text, True, self.color_main)
        text_rect = text_surface.get_rect(center=self.rect.center)  # Центрируем текст
        screen.blit(text_surface, text_rect)

    def animate(self, time):
        if not self.flag_click:
            if event.type == pygame.MOUSEBUTTONDOWN:
                if self.rect.collidepoint(event.pos):  # Проверяем нажатие на кнопку
                    self.flag_click = True

                    if self.animation:
                        if self.real_time == 0:
                            self.real_time += time
                        else:
                            self.real_time = time
        if self.flag_click:
            if event.type == pygame.MOUSEBUTTONUP:
                self.flag_click = False
                self.action()

        if self.real_time > 0:
            if self.real_time < self.time_first_part:
                self.current_size = self.size_font - (self.size_font * 0.5 * (self.real_time / self.time_first_part))
            elif (self.real_time - self.time_first_part) < self.time_second_part:
                self.current_size = self.size_font * 0.5 * (
                        ((self.real_time - self.time_first_part) / self.time_second_part) + 1)
            self.real_time += time
            if self.real_time > self.time_animation:
                self.real_time = 0
                self.current_size = self.size_font
            self.font = pygame.font.SysFont('Arial', int(self.current_size))


class Window:
    def __init__(self, list_objects: list, background):
        self.list_objects = list_objects
        self.background = background
        self.clock = pygame.time.Clock()

    def update(self):
        time = self.clock.get_time()
        self.background.draw()
        self.background.animate(time)
        for i in range(len(self.list_objects)):
            self.list_objects[i].draw()
            self.list_objects[i].animate(time)
        self.clock.tick(fps)

    def add_obj(self, obj):
        self.list_objects.append(obj)

    def remove_obj(self, obj):
        self.list_objects.remove(obj)


def exit_game_f():
    global running
    running = False


def start_f():
    global active_window
    active_window = 'game_window'
    global game_window
    game_window.list_objects[1].x, game_window.list_objects[1].y = width / 2 - 50, 200
    game_window.list_objects[1].hit_box.x, game_window.list_objects[1].hit_box.y = width / 2 - 50, 200
    game_window.list_objects[1].decor.x, game_window.list_objects[1].decor.y = width / 2 - 50, 200
    game_window.list_objects[1].V = [0.0, 0.0]
    game_window.list_objects[1].omega = 0.0
    game_window.list_objects[1].score_ = 0
    game_window.list_objects[2].list_segments = []


def select_bal_f():
    global active_window
    active_window = 'select_bal_window'


def select_background_f():
    global active_window
    active_window = 'select_background_window'


def forward_bg_f():
    global cbg
    global list_backgrounds
    cbg += 1
    cbg %= len(list_backgrounds)
    select_background_window.background = BackGround(list_backgrounds[cbg])
    game_window.background = BackGround(list_backgrounds[cbg])


def backward_bg_f():
    global cbg
    global list_backgrounds
    cbg -= 1
    if cbg < 0: cbg = len(list_backgrounds) - 1
    select_background_window.background = BackGround(list_backgrounds[cbg])
    game_window.background = BackGround(list_backgrounds[cbg])


def settings_f():
    global active_window
    active_window = 'settings_window'


def rules_f():
    global active_window
    active_window = 'rules_window'


def about_f():
    global active_window
    active_window = "about_window"


def end_f():
    global active_window
    active_window = 'main_window'
    if int(''.join([i for i in best_score.text if i.isdigit()])) < int(
        score.text): best_score.text = f'BEST SCORE: {score.text}'
    global game_window
    game_window.list_objects[1].x, game_window.list_objects[1].y = width / 2 - 50, 200
    game_window.list_objects[1].hit_box.x, game_window.list_objects[1].hit_box.y = width / 2 - 50, 200
    game_window.list_objects[1].decor.x, game_window.list_objects[1].decor.y = width / 2 - 50, 200
    game_window.list_objects[1].V = [0.0, 0.0]
    game_window.list_objects[1].omega = 0.0
    game_window.list_objects[1].score_ = 0
    game_window.list_objects[2].list_segments = []


def back_f():
    global active_window
    active_window = "main_window"


def forward_f():
    global list_balls
    global cb
    global cr
    global select_bal_window
    cb += 1
    cb %= len(list_balls)
    game_window.list_objects[1].decor = Decor((width / 2 - 50, 200),
                                              pygame.transform.scale(load_image(list_balls[cb]), (100, 100)))
    select_bal_window.list_objects[0] = Decor((width / 2 - 50, 200),
                                              pygame.transform.scale(load_image(list_balls[cb]), (100, 100)))


def backward_f():
    global list_balls
    global cb
    global cr
    global select_bal_window
    cb -= 1
    if cb < 0: cb = len(list_balls) - 1
    game_window.list_objects[1].decor = Decor((width / 2 - 50, 200),
                                              pygame.transform.scale(load_image(list_balls[cb]), (100, 100)))
    select_bal_window.list_objects[0] = Decor((width / 2 - 50, 200),
                                              pygame.transform.scale(load_image(list_balls[cb]), (100, 100)))


def forward__f():
    global list_balls
    global cb
    global cr
    global select_bal_window
    cr += 1
    cr %= len(list_balls)
    game_window.list_objects[2].decor = pygame.transform.scale(load_image(list_balls[cr]), (50, 50))
    select_bal_window.list_objects[4] = Decor((width / 2 - 25, 600),
                                              pygame.transform.scale(load_image(list_balls[cr]), (50, 50)))


def backward__f():
    global list_balls
    global cb
    global cr
    global select_bal_window
    cr -= 1
    if cr < 0: cr = len(list_balls) - 1
    game_window.list_objects[2].decor = pygame.transform.scale(load_image(list_balls[cr]), (50, 50))
    select_bal_window.list_objects[4] = Decor((width / 2 - 25, 600),
                                              pygame.transform.scale(load_image(list_balls[cr]), (50, 50)))


def fps_down_f():
    global fps
    fps -= 1
    if fps < 1: fps = 1
    global settings_window
    settings_window.list_objects[3].text = str(fps)


def fps_up_f():
    global fps
    fps += 1
    settings_window.list_objects[3].text = str(fps)


def sound_down_f():
    global sound
    sound -= 1
    if sound < 0: sound = 0
    settings_window.list_objects[6].text = str(sound)


def sound_up_f():
    global sound
    sound += 1
    if sound > 100: sound = 100
    settings_window.list_objects[6].text = str(sound)


if __name__ == "__main__":
    pygame.init()
    pygame.display.set_caption('Draw for Drive')
    size = width, height = pygame.display.Info().current_w, pygame.display.Info().current_h
    screen = pygame.display.set_mode(size, pygame.NOFRAME)
    running = True
    fps = 60
    sound = 100
    list_backgrounds = ['backgroundanimate1.gif', 'backgroundanimate2.gif', 'backgroundanimate3.gif',
                        'backgroundanimate4.gif']
    cbg = 1
    list_balls = ['yellowbal.png', 'perpelbal.png', 'blubal.png']
    cb = 1
    cr = 0
    current_bal = Decor((width / 2 - 50, 200), pygame.transform.scale(load_image('perpelbal.png'), (100, 100)))
    current_road = pygame.transform.scale(load_image('yellowbal.png'), (50, 50))
    current_road_ = Decor((width / 2 - 25, 600), current_road)

    road = Road(50, current_road)
    bal = Bal(width / 2 - 50, 200, BallHitbox(100, (width / 2 - 50, 200)), current_bal)

    # main
    best_score = Button(100, 50, 700, 50, '0', 20, (255, 0, 0), lambda: ..., animation=False)
    exit_game = Button(width - 400, 50, 300, 100, 'EXIT', 50, (255, 0, 0), exit_game_f, animation=False)
    start = Button(100, 150, 200, 100, 'START', 50, (255, 0, 0), start_f, animation=False)
    select_bal = Button(100, 300, 400, 100, 'SELECT BAL', 50, (255, 0, 0), select_bal_f, animation=False)
    select_background = Button(100, 450, 600, 100, 'SELECT BACKGROUND', 50, (255, 0, 0), select_background_f,
                               animation=False)
    settings = Button(100, 600, 300, 100, 'SETTINGS', 50, (255, 0, 0), settings_f, animation=False)
    rules = Button(100, 750, 200, 100, 'RULES', 50, (255, 0, 0), rules_f, animation=False)
    about = Button(100, 900, 500, 100, 'ABOUT THIS GAME', 50, (255, 0, 0), about_f, animation=False)
    # game
    end = Button(width - 400, 50, 300, 100, 'END GAME', 50, (255, 0, 0), end_f, animation=False)
    score = Button(100, 50, 700, 50, '0', 20, (255, 0, 0), lambda: ..., animation=False)
    # select
    forward = Button(width - 400, 200, 300, 300, '>', 500, (255, 0, 0), forward_f, animation=True)
    backward = Button(100, 200, 300, 300, '<', 500, (255, 0, 0), backward_f, animation=True)
    forward_ = Button(width - 400, 600, 300, 300, '>', 500, (255, 0, 0), forward__f, animation=True)
    backward_ = Button(100, 600, 300, 300, '<', 500, (255, 0, 0), backward__f, animation=True)
    # select bg
    forward_bg = Button(width - 400, 200, 300, 300, '>', 500, (255, 0, 0), forward_bg_f, animation=True)
    backward_bg = Button(100, 200, 300, 300, '<', 500, (255, 0, 0), backward_bg_f, animation=True)
    # settings
    back = Button(width - 400, 50, 300, 100, 'BACK', 50, (255, 0, 0), back_f, animation=False)
    fps_down = Button(100, height / 4 - 100, 200, 200, '-', 300, (255, 0, 0), fps_down_f, animation=True)
    fps_up = Button(700, height / 4 - 100, 200, 200, '+', 300, (255, 0, 0), fps_up_f, animation=True)
    fps_button = Button(350, height / 4 - 100, 300, 200, '60', 150, (255, 0, 0), lambda: ..., animation=False)
    fps_text = Button(950, height / 4 - 100, 400, 200, 'FPS', 150, (255, 0, 0), lambda: ..., animation=False)
    sound_down = Button(100, height * 3 / 4 - 100, 200, 200, '-', 300, (255, 0, 0), sound_down_f, animation=True)
    sound_up = Button(700, height * 3 / 4 - 100, 200, 200, '+', 300, (255, 0, 0), sound_up_f, animation=True)
    sound_button = Button(350, height * 3 / 4 - 100, 300, 200, '100', 150, (255, 0, 0), lambda: ..., animation=False)
    sound_text = Button(950, height * 3 / 4 - 100, 600, 200, 'SOUND', 150, (255, 0, 0), lambda: ..., animation=False)
    # windows
    main_window = Window([exit_game, start, select_bal, select_background, settings, rules, about, best_score],
                         BackGround('mainmenu.gif'))
    game_window = Window([score, bal, road, end], BackGround('backgroundanimate2.gif'))
    select_bal_window = Window([current_bal, forward, backward, back, current_road_, forward_, backward_],
                               BackGround('mainmenubackgroundanimate.gif'))
    select_background_window = Window([back, forward_bg, backward_bg], BackGround('backgroundanimate2.gif'))
    settings_window = Window(
        [back, fps_down, fps_up, fps_button, fps_text, sound_down, sound_button, sound_up, sound_text],
        BackGround('mainmenu.gif'))
    rules_window = Window([back], Decor((0, 0), pygame.transform.scale(load_image('rules.png'), size)))
    about_window = Window([back], Decor((0, 0), pygame.transform.scale(load_image('pasport.png'), size)))

    active_window = 'main_window'

    dict_windows = {'main_window': main_window,
                    'game_window': game_window,
                    'select_bal_window': select_bal_window,
                    'select_background_window': select_background_window,
                    'settings_window': settings_window,
                    'rules_window': rules_window,
                    "about_window": about_window
                    }
    while running:
        # внутри игрового цикла ещё один цикл
        # приёма и обработки сообщений
        for event in pygame.event.get():
            # при закрытии окна
            if event.type == pygame.QUIT:
                running = False
                # РЕАКЦИЯ НА ОСТАЛЬНЫЕ СОБЫТИЯ
            ...
        # отрисовка и изменение свойств объектов
        dict_windows[active_window].update()
        pygame.display.flip()
